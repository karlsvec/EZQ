---
# Notice this is a PostgreSQL connection string, *not* an ODBC connection
# string. The parameter labels are subtly different and it uses space rather
# than semicolon as the separator.
connection_string: "host=development-rds-pgsq.csr7bxits1yb.us-east-1.rds.amazonaws.com
  port=5432
  user=app
  password=app
  dbname=praxik"

# Short, single line queries can be formatted like this:
#query: "SELECT * FROM isa_run1_scn"

# Longer, multi-line queries can be done like this.
query: "select
  id,
  uuid::text,
  fips,
  boundary,
  owner,
  field,
  management,
  conspract,
  rotation,
  yield,
  cb
  from isa_run1_scn 
  order by
  boundary asc,
  id asc"

# 'multi' or 'single'
batch_type: 'multi'

# Specifies where to place the output of batch_processor
job_queue: 'Batch_test'

# Everything in this section is added directly to the job message
# body. Use this to communicate any flags or settings that are not communicated
# by the query results or by processor overrides in the job_preamble section.
add_to_job_message_body:

  # toggle stuff like weps and r2d here.
  pre_grid_command: "6k_pregrid.exe
    -c ODBC
    --ssurgoconnstr Server=10.1.2.8;Port=5432;Uid=postgres;Pwd=postgres;Database=ssurgo;
    -g iowammp.gdb
    -j $jobid
    -f $input_file"

  # true/false
  generate_dominant_critical_soil_report: true

  # Pregrid_wrapper adds these to the worker tasks
  job_files:
  - bucket:     6k_test.praxik
    key:        Archive.zip
    decompress: true

# Anything in this section will be placed in the EZQ preamble for each job
# output by bactch processor, allowing you to override settings for the next
# process stage.
#
job_preamble:

  # If we change the location of the gdb files in S3 so they are in the
  # correct relative directory, it would be possible to specify the gdb
  # download here via a get_s3_files entry. Currently, the gdb download takes
  # place at instance startup (it's specified in the instance userdata).
  get_s3_files:
    - bucket: 6k_test.praxik
      key: Archive.zip
      decompress: true

  # process_command:
  # result_queue:
  # etc.

  
